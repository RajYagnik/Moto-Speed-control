
Speed_Control_BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004688  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c4  080047c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047c4  080047c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c4  080047c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000010  080047d8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080047d8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0d8  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c00  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000098e  00000000  00000000  0002e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c65  00000000  00000000  0002f306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d368  00000000  00000000  00045f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000868e2  00000000  00000000  000532d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034ec  00000000  00000000  000d9bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000dd0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004780 	.word	0x08004780

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004780 	.word	0x08004780

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <sat>:
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double sat(double value,double max, double min){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000a46:	e9c7 2300 	strd	r2, r3, [r7]

	if (value >= max){
 8000a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a52:	f7ff ffbf 	bl	80009d4 <__aeabi_dcmpge>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <sat+0x26>
		return max;
 8000a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a60:	e00d      	b.n	8000a7e <sat+0x42>
	}
	else if (value <=min){
 8000a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a6a:	f7ff ffa9 	bl	80009c0 <__aeabi_dcmple>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <sat+0x3e>
		return min;
 8000a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a78:	e001      	b.n	8000a7e <sat+0x42>
	}
	else{
		return value;
 8000a7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	}
}
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4619      	mov	r1, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <piCont>:

/*PI-Controller implementation*/
double piCont(double set, double act){
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000a92:	e9c7 2300 	strd	r2, r3, [r7]

	e = set - act;
 8000a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9e:	f7ff fb5b 	bl	8000158 <__aeabi_dsub>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	4956      	ldr	r1, [pc, #344]	; (8000c00 <piCont+0x178>)
 8000aa8:	e9c1 2300 	strd	r2, r3, [r1]

	I += e*0.01;
 8000aac:	4b54      	ldr	r3, [pc, #336]	; (8000c00 <piCont+0x178>)
 8000aae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ab2:	a34d      	add	r3, pc, #308	; (adr r3, 8000be8 <piCont+0x160>)
 8000ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab8:	f7ff fd06 	bl	80004c8 <__aeabi_dmul>
 8000abc:	4602      	mov	r2, r0
 8000abe:	460b      	mov	r3, r1
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4b4f      	ldr	r3, [pc, #316]	; (8000c04 <piCont+0x17c>)
 8000ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aca:	f7ff fb47 	bl	800015c <__adddf3>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	494c      	ldr	r1, [pc, #304]	; (8000c04 <piCont+0x17c>)
 8000ad4:	e9c1 2300 	strd	r2, r3, [r1]

	D = (e - e0)/0.01;
 8000ad8:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <piCont+0x178>)
 8000ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ade:	4b4a      	ldr	r3, [pc, #296]	; (8000c08 <piCont+0x180>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f7ff fb38 	bl	8000158 <__aeabi_dsub>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	a33d      	add	r3, pc, #244	; (adr r3, 8000be8 <piCont+0x160>)
 8000af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af6:	f7ff fe11 	bl	800071c <__aeabi_ddiv>
 8000afa:	4602      	mov	r2, r0
 8000afc:	460b      	mov	r3, r1
 8000afe:	4943      	ldr	r1, [pc, #268]	; (8000c0c <piCont+0x184>)
 8000b00:	e9c1 2300 	strd	r2, r3, [r1]

	e0 = e;
 8000b04:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <piCont+0x178>)
 8000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0a:	493f      	ldr	r1, [pc, #252]	; (8000c08 <piCont+0x180>)
 8000b0c:	e9c1 2300 	strd	r2, r3, [r1]

	pi_out = kp*e + ki*I + kd*D;
 8000b10:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <piCont+0x17c>)
 8000b12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b16:	a336      	add	r3, pc, #216	; (adr r3, 8000bf0 <piCont+0x168>)
 8000b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1c:	f7ff fcd4 	bl	80004c8 <__aeabi_dmul>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <piCont+0x178>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f7ff fb15 	bl	800015c <__adddf3>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	4614      	mov	r4, r2
 8000b38:	461d      	mov	r5, r3
 8000b3a:	4b34      	ldr	r3, [pc, #208]	; (8000c0c <piCont+0x184>)
 8000b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b40:	a32d      	add	r3, pc, #180	; (adr r3, 8000bf8 <piCont+0x170>)
 8000b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b46:	f7ff fcbf 	bl	80004c8 <__aeabi_dmul>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4620      	mov	r0, r4
 8000b50:	4629      	mov	r1, r5
 8000b52:	f7ff fb03 	bl	800015c <__adddf3>
 8000b56:	4602      	mov	r2, r0
 8000b58:	460b      	mov	r3, r1
 8000b5a:	492d      	ldr	r1, [pc, #180]	; (8000c10 <piCont+0x188>)
 8000b5c:	e9c1 2300 	strd	r2, r3, [r1]

	pi_sat = sat(pi_out,200,100);
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <piCont+0x188>)
 8000b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b66:	f04f 0200 	mov.w	r2, #0
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <piCont+0x18c>)
 8000b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <piCont+0x190>)
 8000b76:	f7ff ff61 	bl	8000a3c <sat>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4927      	ldr	r1, [pc, #156]	; (8000c1c <piCont+0x194>)
 8000b80:	e9c1 2300 	strd	r2, r3, [r1]

	//Anti-windup Clamping
	if ((pi_out != pi_sat) && (e*pi_out > 0)){
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <piCont+0x188>)
 8000b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <piCont+0x194>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	f7ff ff02 	bl	8000998 <__aeabi_dcmpeq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11b      	bne.n	8000bd2 <piCont+0x14a>
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <piCont+0x178>)
 8000b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <piCont+0x188>)
 8000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba6:	f7ff fc8f 	bl	80004c8 <__aeabi_dmul>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4610      	mov	r0, r2
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	f7ff ff15 	bl	80009e8 <__aeabi_dcmpgt>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <piCont+0x14a>

		I = 0;
 8000bc4:	490f      	ldr	r1, [pc, #60]	; (8000c04 <piCont+0x17c>)
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return pi_sat;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <piCont+0x194>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	f3af 8000 	nop.w
 8000be8:	47ae147b 	.word	0x47ae147b
 8000bec:	3f847ae1 	.word	0x3f847ae1
 8000bf0:	9999999a 	.word	0x9999999a
 8000bf4:	3fa99999 	.word	0x3fa99999
 8000bf8:	9999999a 	.word	0x9999999a
 8000bfc:	3fb99999 	.word	0x3fb99999
 8000c00:	20000060 	.word	0x20000060
 8000c04:	20000070 	.word	0x20000070
 8000c08:	20000068 	.word	0x20000068
 8000c0c:	20000078 	.word	0x20000078
 8000c10:	20000080 	.word	0x20000080
 8000c14:	40590000 	.word	0x40590000
 8000c18:	40690000 	.word	0x40690000
 8000c1c:	20000088 	.word	0x20000088

08000c20 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)//100Hz
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d102      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		IS_TIM_elapsed = TRUE;
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
	}
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000094 	.word	0x20000094
 8000c44:	2000002c 	.word	0x2000002c

08000c48 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5)
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	2b20      	cmp	r3, #32
 8000c56:	d104      	bne.n	8000c62 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		SpeedCount++;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x24>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x24>)
 8000c60:	6013      	str	r3, [r2, #0]
	}
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000030 	.word	0x20000030

08000c70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	Speed_d = rec.dataRx.num1;
 8000c78:	4908      	ldr	r1, [pc, #32]	; (8000c9c <HAL_UART_RxCpltCallback+0x2c>)
 8000c7a:	680a      	ldr	r2, [r1, #0]
 8000c7c:	684b      	ldr	r3, [r1, #4]
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <HAL_UART_RxCpltCallback+0x30>)
 8000c80:	e9c1 2300 	strd	r2, r3, [r1]
	CFlag = rec.dataRx.num2;
 8000c84:	4905      	ldr	r1, [pc, #20]	; (8000c9c <HAL_UART_RxCpltCallback+0x2c>)
 8000c86:	688a      	ldr	r2, [r1, #8]
 8000c88:	68cb      	ldr	r3, [r1, #12]
 8000c8a:	4906      	ldr	r1, [pc, #24]	; (8000ca4 <HAL_UART_RxCpltCallback+0x34>)
 8000c8c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	200001c0 	.word	0x200001c0
 8000ca0:	20000048 	.word	0x20000048
 8000ca4:	20000050 	.word	0x20000050

08000ca8 <LPF>:

double LPF(double x, double x_old, double alpha){
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000cb2:	e9c7 2300 	strd	r2, r3, [r7]
	return (alpha*x + (1-alpha)*x_old);
 8000cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000cbe:	f7ff fc03 	bl	80004c8 <__aeabi_dmul>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4614      	mov	r4, r2
 8000cc8:	461d      	mov	r5, r3
 8000cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	490c      	ldr	r1, [pc, #48]	; (8000d04 <LPF+0x5c>)
 8000cd4:	f7ff fa40 	bl	8000158 <__aeabi_dsub>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ce4:	f7ff fbf0 	bl	80004c8 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4620      	mov	r0, r4
 8000cee:	4629      	mov	r1, r5
 8000cf0:	f7ff fa34 	bl	800015c <__adddf3>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
}
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bdb0      	pop	{r4, r5, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	3ff00000 	.word	0x3ff00000

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f000 fbfd 	bl	800150c <HAL_Init>

  /* USER CODE BEGIN Init */
  PWM_s = 100;
 8000d12:	4965      	ldr	r1, [pc, #404]	; (8000ea8 <main+0x1a0>)
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b64      	ldr	r3, [pc, #400]	; (8000eac <main+0x1a4>)
 8000d1a:	e9c1 2300 	strd	r2, r3, [r1]
  Speed_d = 0;
 8000d1e:	4964      	ldr	r1, [pc, #400]	; (8000eb0 <main+0x1a8>)
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f8dc 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f000 f9e6 	bl	8001100 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d34:	f000 f9be 	bl	80010b4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d38:	f000 f91c 	bl	8000f74 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000d3c:	f000 f990 	bl	8001060 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d40:	485c      	ldr	r0, [pc, #368]	; (8000eb4 <main+0x1ac>)
 8000d42:	f001 fdf1 	bl	8002928 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rec.byteRx, 16);
 8000d46:	2210      	movs	r2, #16
 8000d48:	495b      	ldr	r1, [pc, #364]	; (8000eb8 <main+0x1b0>)
 8000d4a:	485c      	ldr	r0, [pc, #368]	; (8000ebc <main+0x1b4>)
 8000d4c:	f002 fdc2 	bl	80038d4 <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000d50:	210c      	movs	r1, #12
 8000d52:	4858      	ldr	r0, [pc, #352]	; (8000eb4 <main+0x1ac>)
 8000d54:	f001 fe92 	bl	8002a7c <HAL_TIM_PWM_Start>
  SP_PWM(PWM_s);
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <main+0x1a0>)
 8000d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5e:	4955      	ldr	r1, [pc, #340]	; (8000eb4 <main+0x1ac>)
 8000d60:	680c      	ldr	r4, [r1, #0]
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fe49 	bl	80009fc <__aeabi_d2uiz>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6423      	str	r3, [r4, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  trans.dataTx.num1 = 0;
 8000d6e:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <main+0x1b8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  trans.dataTx.num2 = 0;
 8000d78:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <main+0x1b8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  trans.byteTx[16] = 'A';
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <main+0x1b8>)
 8000d84:	2241      	movs	r2, #65	; 0x41
 8000d86:	741a      	strb	r2, [r3, #16]
  trans.byteTx[17] = '\n';
 8000d88:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <main+0x1b8>)
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	745a      	strb	r2, [r3, #17]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (IS_TIM_elapsed)
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <main+0x1bc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0fa      	beq.n	8000d8e <main+0x86>
	  	  	  	  {
	  	  	  		  raw_speed = ((double) (SpeedCount) * 60) / (PPR * dt);
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <main+0x1c0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fb19 	bl	80003d4 <__aeabi_ui2d>
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <main+0x1c4>)
 8000da8:	f7ff fb8e 	bl	80004c8 <__aeabi_dmul>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	a338      	add	r3, pc, #224	; (adr r3, 8000e98 <main+0x190>)
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	f7ff fcaf 	bl	800071c <__aeabi_ddiv>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4943      	ldr	r1, [pc, #268]	; (8000ed0 <main+0x1c8>)
 8000dc4:	e9c1 2300 	strd	r2, r3, [r1]
	  	  	  		  Speed_f = LPF(raw_speed, Speed_f, alpha_speed);
 8000dc8:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <main+0x1c8>)
 8000dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <main+0x1cc>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	a532      	add	r5, pc, #200	; (adr r5, 8000ea0 <main+0x198>)
 8000dd6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8000dda:	e9cd 4500 	strd	r4, r5, [sp]
 8000dde:	f7ff ff63 	bl	8000ca8 <LPF>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	493b      	ldr	r1, [pc, #236]	; (8000ed4 <main+0x1cc>)
 8000de8:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  		  SpeedCount = 0;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <main+0x1c0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]


	  	  	  		  //raw_speed = 13500;
	  	  	  		  //Speed_f = 12000;

	  	  	  		  uartTx_count++;
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <main+0x1d0>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <main+0x1d0>)
 8000dfc:	701a      	strb	r2, [r3, #0]

	  	  	  		  //sprintf(RPM, "%f\n\r", (float)raw_speed);
	  	  	  		  if (CFlag){
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <main+0x1d4>)
 8000e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	f7ff fdc4 	bl	8000998 <__aeabi_dcmpeq>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d116      	bne.n	8000e44 <main+0x13c>
	  	  	  			  Control_in = (uint16_t)piCont(Speed_d,Speed_f);
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <main+0x1a8>)
 8000e18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <main+0x1cc>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fe31 	bl	8000a88 <piCont>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff fde5 	bl	80009fc <__aeabi_d2uiz>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <main+0x1d8>)
 8000e38:	801a      	strh	r2, [r3, #0]
	  	  	  			  SP_PWM(Control_in);
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <main+0x1d8>)
 8000e3c:	881a      	ldrh	r2, [r3, #0]
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <main+0x1ac>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40
	  	  	  		  }


	  	  	  		  if(uartTx_count % 10 == 0)
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <main+0x1d0>)
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <main+0x1dc>)
 8000e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4e:	08d9      	lsrs	r1, r3, #3
 8000e50:	460b      	mov	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d117      	bne.n	8000e90 <main+0x188>
	  	  	  		  {
	  	  	  			  //HAL_UART_Transmit_DMA(&huart3, RPM, strlen(RPM));
	  	  	  			  trans.dataTx.num1 = Speed_f;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <main+0x1cc>)
 8000e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <main+0x1b8>)
 8000e68:	4602      	mov	r2, r0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	605a      	str	r2, [r3, #4]
	  	  	  			  trans.dataTx.num2 = Speed_d;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <main+0x1a8>)
 8000e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <main+0x1b8>)
 8000e78:	4602      	mov	r2, r0
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	60da      	str	r2, [r3, #12]
	  	  	  			  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)trans.byteTx, 18);
 8000e80:	2212      	movs	r2, #18
 8000e82:	490f      	ldr	r1, [pc, #60]	; (8000ec0 <main+0x1b8>)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <main+0x1b4>)
 8000e86:	f002 fcb5 	bl	80037f4 <HAL_UART_Transmit_DMA>
	  	  	  			  uartTx_count = 0;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <main+0x1d0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
	  	  	  		  }

	  	  	  		  IS_TIM_elapsed = FALSE;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <main+0x1bc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
	  if (IS_TIM_elapsed)
 8000e96:	e77a      	b.n	8000d8e <main+0x86>
 8000e98:	1eb851ec 	.word	0x1eb851ec
 8000e9c:	3fc1eb85 	.word	0x3fc1eb85
 8000ea0:	9999999a 	.word	0x9999999a
 8000ea4:	3fb99999 	.word	0x3fb99999
 8000ea8:	20000058 	.word	0x20000058
 8000eac:	40590000 	.word	0x40590000
 8000eb0:	20000048 	.word	0x20000048
 8000eb4:	20000094 	.word	0x20000094
 8000eb8:	200001c0 	.word	0x200001c0
 8000ebc:	200000dc 	.word	0x200000dc
 8000ec0:	200001ac 	.word	0x200001ac
 8000ec4:	2000002c 	.word	0x2000002c
 8000ec8:	20000030 	.word	0x20000030
 8000ecc:	404e0000 	.word	0x404e0000
 8000ed0:	20000038 	.word	0x20000038
 8000ed4:	20000040 	.word	0x20000040
 8000ed8:	20000092 	.word	0x20000092
 8000edc:	20000050 	.word	0x20000050
 8000ee0:	20000090 	.word	0x20000090
 8000ee4:	cccccccd 	.word	0xcccccccd

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b090      	sub	sp, #64	; 0x40
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	2228      	movs	r2, #40	; 0x28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fc16 	bl	8004728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 f899 	bl	8002068 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f3c:	f000 f92c 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2302      	movs	r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fb06 	bl	800256c <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f66:	f000 f917 	bl	8001198 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3740      	adds	r7, #64	; 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fae:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fce:	4823      	ldr	r0, [pc, #140]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fd0:	f001 fc5a 	bl	8002888 <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fda:	f000 f8dd 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481c      	ldr	r0, [pc, #112]	; (800105c <MX_TIM2_Init+0xe8>)
 8000fec:	f001 ffb2 	bl	8002f54 <HAL_TIM_ConfigClockSource>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ff6:	f000 f8cf 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ffa:	4818      	ldr	r0, [pc, #96]	; (800105c <MX_TIM2_Init+0xe8>)
 8000ffc:	f001 fce6 	bl	80029cc <HAL_TIM_PWM_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001006:	f000 f8c7 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4619      	mov	r1, r3
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <MX_TIM2_Init+0xe8>)
 800101a:	f002 fb2b 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001024:	f000 f8b8 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001028:	2360      	movs	r3, #96	; 0x60
 800102a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	220c      	movs	r2, #12
 800103c:	4619      	mov	r1, r3
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <MX_TIM2_Init+0xe8>)
 8001040:	f001 fec6 	bl	8002dd0 <HAL_TIM_PWM_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800104a:	f000 f8a5 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <MX_TIM2_Init+0xe8>)
 8001050:	f000 f8fe 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8001054:	bf00      	nop
 8001056:	3738      	adds	r7, #56	; 0x38
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000094 	.word	0x20000094

08001060 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART3_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART3_UART_Init+0x4c>)
 8001098:	f002 fb5c 	bl	8003754 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f879 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000dc 	.word	0x200000dc
 80010b0:	40004800 	.word	0x40004800

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_DMA_Init+0x48>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <MX_DMA_Init+0x48>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_DMA_Init+0x48>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	200c      	movs	r0, #12
 80010d8:	f000 fb51 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010dc:	200c      	movs	r0, #12
 80010de:	f000 fb6a 	bl	80017b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	200d      	movs	r0, #13
 80010e8:	f000 fb49 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010ec:	200d      	movs	r0, #13
 80010ee:	f000 fb62 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_GPIO_Init+0x8c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <MX_GPIO_Init+0x8c>)
 800111a:	f043 0320 	orr.w	r3, r3, #32
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_GPIO_Init+0x8c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_GPIO_Init+0x8c>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a16      	ldr	r2, [pc, #88]	; (800118c <MX_GPIO_Init+0x8c>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_GPIO_Init+0x8c>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_GPIO_Init+0x8c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <MX_GPIO_Init+0x8c>)
 800114a:	f043 0308 	orr.w	r3, r3, #8
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_GPIO_Init+0x8c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : RPM_Pin */
  GPIO_InitStruct.Pin = RPM_Pin;
 800115c:	2320      	movs	r3, #32
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_GPIO_Init+0x90>)
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RPM_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <MX_GPIO_Init+0x94>)
 8001170:	f000 fdde 	bl	8001d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2017      	movs	r0, #23
 800117a:	f000 fb00 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800117e:	2017      	movs	r0, #23
 8001180:	f000 fb19 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	10110000 	.word	0x10110000
 8001194:	40010800 	.word	0x40010800

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_MspInit+0x5c>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_MspInit+0x5c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_MspInit+0x5c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <HAL_MspInit+0x5c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_MspInit+0x60>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_MspInit+0x60>)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000

08001208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001218:	d113      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_TIM_Base_MspInit+0x44>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_TIM_Base_MspInit+0x44>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_TIM_Base_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	201c      	movs	r0, #28
 8001238:	f000 faa1 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800123c:	201c      	movs	r0, #28
 800123e:	f000 faba 	bl	80017b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126e:	d117      	bne.n	80012a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_TIM_MspPostInit+0x58>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_TIM_MspPostInit+0x58>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_MspPostInit+0x58>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001288:	2308      	movs	r3, #8
 800128a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <HAL_TIM_MspPostInit+0x5c>)
 800129c:	f000 fd48 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010800 	.word	0x40010800

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_UART_MspInit+0x138>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	f040 8086 	bne.w	80013de <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_UART_MspInit+0x13c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a45      	ldr	r2, [pc, #276]	; (80013ec <HAL_UART_MspInit+0x13c>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_UART_MspInit+0x13c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <HAL_UART_MspInit+0x13c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <HAL_UART_MspInit+0x13c>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6193      	str	r3, [r2, #24]
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_UART_MspInit+0x13c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4836      	ldr	r0, [pc, #216]	; (80013f0 <HAL_UART_MspInit+0x140>)
 8001318:	f000 fd0a 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800131c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001320:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	482f      	ldr	r0, [pc, #188]	; (80013f0 <HAL_UART_MspInit+0x140>)
 8001332:	f000 fcfd 	bl	8001d30 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_UART_MspInit+0x144>)
 8001338:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <HAL_UART_MspInit+0x148>)
 800133a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_UART_MspInit+0x144>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_UART_MspInit+0x144>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_UART_MspInit+0x144>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_UART_MspInit+0x144>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_UART_MspInit+0x144>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_UART_MspInit+0x144>)
 800135c:	2220      	movs	r2, #32
 800135e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_UART_MspInit+0x144>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001366:	4823      	ldr	r0, [pc, #140]	; (80013f4 <HAL_UART_MspInit+0x144>)
 8001368:	f000 fa40 	bl	80017ec <HAL_DMA_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001372:	f7ff ff11 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_UART_MspInit+0x144>)
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_UART_MspInit+0x144>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_UART_MspInit+0x14c>)
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_UART_MspInit+0x150>)
 8001386:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_UART_MspInit+0x14c>)
 800138a:	2210      	movs	r2, #16
 800138c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_UART_MspInit+0x14c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_UART_MspInit+0x14c>)
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_UART_MspInit+0x14c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_UART_MspInit+0x14c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_UART_MspInit+0x14c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_UART_MspInit+0x14c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80013b2:	4812      	ldr	r0, [pc, #72]	; (80013fc <HAL_UART_MspInit+0x14c>)
 80013b4:	f000 fa1a 	bl	80017ec <HAL_DMA_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80013be:	f7ff feeb 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_UART_MspInit+0x14c>)
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_UART_MspInit+0x14c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2027      	movs	r0, #39	; 0x27
 80013d4:	f000 f9d3 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013d8:	2027      	movs	r0, #39	; 0x27
 80013da:	f000 f9ec 	bl	80017b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004800 	.word	0x40004800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	20000124 	.word	0x20000124
 80013f8:	40020030 	.word	0x40020030
 80013fc:	20000168 	.word	0x20000168
 8001400:	4002001c 	.word	0x4002001c

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 f8a5 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA1_Channel2_IRQHandler+0x10>)
 800145a:	f000 fb35 	bl	8001ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000168 	.word	0x20000168

08001468 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA1_Channel3_IRQHandler+0x10>)
 800146e:	f000 fb2b 	bl	8001ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000124 	.word	0x20000124

0800147c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_Pin);
 8001480:	2020      	movs	r0, #32
 8001482:	f000 fdd9 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM2_IRQHandler+0x10>)
 8001492:	f001 fb95 	bl	8002bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000094 	.word	0x20000094

080014a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <USART3_IRQHandler+0x10>)
 80014a6:	f002 fa3b 	bl	8003920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000dc 	.word	0x200000dc

080014b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c0:	f7ff fff8 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014c6:	490c      	ldr	r1, [pc, #48]	; (80014f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014dc:	4c09      	ldr	r4, [pc, #36]	; (8001504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ea:	f003 f925 	bl	8004738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ee:	f7ff fc0b 	bl	8000d08 <main>
  bx lr
 80014f2:	4770      	bx	lr
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014fc:	080047cc 	.word	0x080047cc
  ldr r2, =_sbss
 8001500:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001504:	200001d4 	.word	0x200001d4

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>
	...

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x28>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f923 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fe3c 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f93b 	bl	80017d2 <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f903 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	20000008 	.word	0x20000008
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <HAL_IncTick+0x20>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000008 	.word	0x20000008
 80015b8:	200001d0 	.word	0x200001d0

080015bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <HAL_GetTick+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	200001d0 	.word	0x200001d0

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4906      	ldr	r1, [pc, #24]	; (8001668 <__NVIC_EnableIRQ+0x34>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff90 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff2d 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff42 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff90 	bl	80016c0 <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5f 	bl	800166c <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff35 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa2 	bl	8001724 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e043      	b.n	800188a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_DMA_Init+0xa8>)
 800180a:	4413      	add	r3, r2
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_DMA_Init+0xac>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	009a      	lsls	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_DMA_Init+0xb0>)
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001836:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800183a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	bffdfff8 	.word	0xbffdfff8
 8001898:	cccccccd 	.word	0xcccccccd
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Start_IT+0x20>
 80018bc:	2302      	movs	r3, #2
 80018be:	e04b      	b.n	8001958 <HAL_DMA_Start_IT+0xb8>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d13a      	bne.n	800194a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f9eb 	bl	8001cd4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 020e 	orr.w	r2, r2, #14
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e00f      	b.n	8001938 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 020a 	orr.w	r2, r2, #10
 8001936:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e005      	b.n	8001956 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001956:	7dfb      	ldrb	r3, [r7, #23]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d008      	beq.n	800198a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2204      	movs	r2, #4
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e020      	b.n	80019cc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 020e 	bic.w	r2, r2, #14
 8001998:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0201 	bic.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d005      	beq.n	80019fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2204      	movs	r2, #4
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	e051      	b.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 020e 	bic.w	r2, r2, #14
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a22      	ldr	r2, [pc, #136]	; (8001aac <HAL_DMA_Abort_IT+0xd4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d029      	beq.n	8001a7a <HAL_DMA_Abort_IT+0xa2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <HAL_DMA_Abort_IT+0xd8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d022      	beq.n	8001a76 <HAL_DMA_Abort_IT+0x9e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_DMA_Abort_IT+0xdc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01a      	beq.n	8001a70 <HAL_DMA_Abort_IT+0x98>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_DMA_Abort_IT+0xe0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d012      	beq.n	8001a6a <HAL_DMA_Abort_IT+0x92>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_DMA_Abort_IT+0xe4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00a      	beq.n	8001a64 <HAL_DMA_Abort_IT+0x8c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <HAL_DMA_Abort_IT+0xe8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d102      	bne.n	8001a5e <HAL_DMA_Abort_IT+0x86>
 8001a58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a5c:	e00e      	b.n	8001a7c <HAL_DMA_Abort_IT+0xa4>
 8001a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a62:	e00b      	b.n	8001a7c <HAL_DMA_Abort_IT+0xa4>
 8001a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a68:	e008      	b.n	8001a7c <HAL_DMA_Abort_IT+0xa4>
 8001a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6e:	e005      	b.n	8001a7c <HAL_DMA_Abort_IT+0xa4>
 8001a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a74:	e002      	b.n	8001a7c <HAL_DMA_Abort_IT+0xa4>
 8001a76:	2310      	movs	r3, #16
 8001a78:	e000      	b.n	8001a7c <HAL_DMA_Abort_IT+0xa4>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <HAL_DMA_Abort_IT+0xec>)
 8001a7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
    } 
  }
  return status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020008 	.word	0x40020008
 8001ab0:	4002001c 	.word	0x4002001c
 8001ab4:	40020030 	.word	0x40020030
 8001ab8:	40020044 	.word	0x40020044
 8001abc:	40020058 	.word	0x40020058
 8001ac0:	4002006c 	.word	0x4002006c
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d04f      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xc8>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d04a      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0204 	bic.w	r2, r2, #4
 8001b16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d029      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xae>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a65      	ldr	r2, [pc, #404]	; (8001cbc <HAL_DMA_IRQHandler+0x1f4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d022      	beq.n	8001b72 <HAL_DMA_IRQHandler+0xaa>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a63      	ldr	r2, [pc, #396]	; (8001cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01a      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xa4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a62      	ldr	r2, [pc, #392]	; (8001cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d012      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x9e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <HAL_DMA_IRQHandler+0x200>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00a      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x98>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5f      	ldr	r2, [pc, #380]	; (8001ccc <HAL_DMA_IRQHandler+0x204>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d102      	bne.n	8001b5a <HAL_DMA_IRQHandler+0x92>
 8001b54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b58:	e00e      	b.n	8001b78 <HAL_DMA_IRQHandler+0xb0>
 8001b5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b5e:	e00b      	b.n	8001b78 <HAL_DMA_IRQHandler+0xb0>
 8001b60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b64:	e008      	b.n	8001b78 <HAL_DMA_IRQHandler+0xb0>
 8001b66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6a:	e005      	b.n	8001b78 <HAL_DMA_IRQHandler+0xb0>
 8001b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b70:	e002      	b.n	8001b78 <HAL_DMA_IRQHandler+0xb0>
 8001b72:	2340      	movs	r3, #64	; 0x40
 8001b74:	e000      	b.n	8001b78 <HAL_DMA_IRQHandler+0xb0>
 8001b76:	2304      	movs	r3, #4
 8001b78:	4a55      	ldr	r2, [pc, #340]	; (8001cd0 <HAL_DMA_IRQHandler+0x208>)
 8001b7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8094 	beq.w	8001cae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b8e:	e08e      	b.n	8001cae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2202      	movs	r2, #2
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d056      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x186>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d051      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 020a 	bic.w	r2, r2, #10
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d029      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x166>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a37      	ldr	r2, [pc, #220]	; (8001cbc <HAL_DMA_IRQHandler+0x1f4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d022      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x162>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a35      	ldr	r2, [pc, #212]	; (8001cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01a      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x15c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d012      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x156>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <HAL_DMA_IRQHandler+0x200>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00a      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x150>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a31      	ldr	r2, [pc, #196]	; (8001ccc <HAL_DMA_IRQHandler+0x204>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d102      	bne.n	8001c12 <HAL_DMA_IRQHandler+0x14a>
 8001c0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c10:	e00e      	b.n	8001c30 <HAL_DMA_IRQHandler+0x168>
 8001c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c16:	e00b      	b.n	8001c30 <HAL_DMA_IRQHandler+0x168>
 8001c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1c:	e008      	b.n	8001c30 <HAL_DMA_IRQHandler+0x168>
 8001c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c22:	e005      	b.n	8001c30 <HAL_DMA_IRQHandler+0x168>
 8001c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c28:	e002      	b.n	8001c30 <HAL_DMA_IRQHandler+0x168>
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e000      	b.n	8001c30 <HAL_DMA_IRQHandler+0x168>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <HAL_DMA_IRQHandler+0x208>)
 8001c32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d034      	beq.n	8001cae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c4c:	e02f      	b.n	8001cae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2208      	movs	r2, #8
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d028      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x1e8>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 020e 	bic.w	r2, r2, #14
 8001c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
    }
  }
  return;
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
}
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40020008 	.word	0x40020008
 8001cbc:	4002001c 	.word	0x4002001c
 8001cc0:	40020030 	.word	0x40020030
 8001cc4:	40020044 	.word	0x40020044
 8001cc8:	40020058 	.word	0x40020058
 8001ccc:	4002006c 	.word	0x4002006c
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d108      	bne.n	8001d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d12:	e007      	b.n	8001d24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e169      	b.n	8002018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d44:	2201      	movs	r2, #1
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8158 	bne.w	8002012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a9a      	ldr	r2, [pc, #616]	; (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d05e      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d6c:	4a98      	ldr	r2, [pc, #608]	; (8001fd0 <HAL_GPIO_Init+0x2a0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d875      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d72:	4a98      	ldr	r2, [pc, #608]	; (8001fd4 <HAL_GPIO_Init+0x2a4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d058      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d78:	4a96      	ldr	r2, [pc, #600]	; (8001fd4 <HAL_GPIO_Init+0x2a4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d86f      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d7e:	4a96      	ldr	r2, [pc, #600]	; (8001fd8 <HAL_GPIO_Init+0x2a8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d052      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d84:	4a94      	ldr	r2, [pc, #592]	; (8001fd8 <HAL_GPIO_Init+0x2a8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d869      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d8a:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <HAL_GPIO_Init+0x2ac>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04c      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d90:	4a92      	ldr	r2, [pc, #584]	; (8001fdc <HAL_GPIO_Init+0x2ac>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d863      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001d96:	4a92      	ldr	r2, [pc, #584]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d046      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
 8001d9c:	4a90      	ldr	r2, [pc, #576]	; (8001fe0 <HAL_GPIO_Init+0x2b0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d85d      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d82a      	bhi.n	8001dfc <HAL_GPIO_Init+0xcc>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d859      	bhi.n	8001e5e <HAL_GPIO_Init+0x12e>
 8001daa:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <HAL_GPIO_Init+0x80>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e05 	.word	0x08001e05
 8001db8:	08001e17 	.word	0x08001e17
 8001dbc:	08001e59 	.word	0x08001e59
 8001dc0:	08001e5f 	.word	0x08001e5f
 8001dc4:	08001e5f 	.word	0x08001e5f
 8001dc8:	08001e5f 	.word	0x08001e5f
 8001dcc:	08001e5f 	.word	0x08001e5f
 8001dd0:	08001e5f 	.word	0x08001e5f
 8001dd4:	08001e5f 	.word	0x08001e5f
 8001dd8:	08001e5f 	.word	0x08001e5f
 8001ddc:	08001e5f 	.word	0x08001e5f
 8001de0:	08001e5f 	.word	0x08001e5f
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e5f 	.word	0x08001e5f
 8001dec:	08001e5f 	.word	0x08001e5f
 8001df0:	08001e5f 	.word	0x08001e5f
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e21 	.word	0x08001e21
 8001dfc:	4a79      	ldr	r2, [pc, #484]	; (8001fe4 <HAL_GPIO_Init+0x2b4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e02:	e02c      	b.n	8001e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e029      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	3304      	adds	r3, #4
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e024      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e01f      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	330c      	adds	r3, #12
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e01a      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e32:	2304      	movs	r3, #4
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e013      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	611a      	str	r2, [r3, #16]
          break;
 8001e4a:	e009      	b.n	8001e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	615a      	str	r2, [r3, #20]
          break;
 8001e56:	e003      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x130>
          break;
 8001e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2bff      	cmp	r3, #255	; 0xff
 8001e64:	d801      	bhi.n	8001e6a <HAL_GPIO_Init+0x13a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	e001      	b.n	8001e6e <HAL_GPIO_Init+0x13e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d802      	bhi.n	8001e7c <HAL_GPIO_Init+0x14c>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x152>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	3b08      	subs	r3, #8
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	210f      	movs	r1, #15
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80b1 	beq.w	8002012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb0:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec8:	4a48      	ldr	r2, [pc, #288]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a40      	ldr	r2, [pc, #256]	; (8001ff0 <HAL_GPIO_Init+0x2c0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <HAL_GPIO_Init+0x1ec>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3f      	ldr	r2, [pc, #252]	; (8001ff4 <HAL_GPIO_Init+0x2c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00d      	beq.n	8001f18 <HAL_GPIO_Init+0x1e8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3e      	ldr	r2, [pc, #248]	; (8001ff8 <HAL_GPIO_Init+0x2c8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x1e4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	; (8001ffc <HAL_GPIO_Init+0x2cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_GPIO_Init+0x1e0>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x1ee>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2e:	492f      	ldr	r1, [pc, #188]	; (8001fec <HAL_GPIO_Init+0x2bc>)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	492c      	ldr	r1, [pc, #176]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4928      	ldr	r1, [pc, #160]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	4922      	ldr	r1, [pc, #136]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	491e      	ldr	r1, [pc, #120]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4918      	ldr	r1, [pc, #96]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4914      	ldr	r1, [pc, #80]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d021      	beq.n	8002004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	490e      	ldr	r1, [pc, #56]	; (8002000 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e021      	b.n	8002012 <HAL_GPIO_Init+0x2e2>
 8001fce:	bf00      	nop
 8001fd0:	10320000 	.word	0x10320000
 8001fd4:	10310000 	.word	0x10310000
 8001fd8:	10220000 	.word	0x10220000
 8001fdc:	10210000 	.word	0x10210000
 8001fe0:	10120000 	.word	0x10120000
 8001fe4:	10110000 	.word	0x10110000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40010800 	.word	0x40010800
 8001ff4:	40010c00 	.word	0x40010c00
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40011400 	.word	0x40011400
 8002000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_GPIO_Init+0x304>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	43db      	mvns	r3, r3
 800200c:	4909      	ldr	r1, [pc, #36]	; (8002034 <HAL_GPIO_Init+0x304>)
 800200e:	4013      	ands	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	f47f ae8e 	bne.w	8001d44 <HAL_GPIO_Init+0x14>
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	372c      	adds	r7, #44	; 0x2c
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fdf6 	bl	8000c48 <HAL_GPIO_EXTI_Callback>
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e272      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8087 	beq.w	8002196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002088:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00c      	beq.n	80020ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002094:	4b8f      	ldr	r3, [pc, #572]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d112      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
 80020a0:	4b8c      	ldr	r3, [pc, #560]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d10b      	bne.n	80020c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ae:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d06c      	beq.n	8002194 <HAL_RCC_OscConfig+0x12c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d168      	bne.n	8002194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e24c      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x76>
 80020d0:	4b80      	ldr	r3, [pc, #512]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a7f      	ldr	r2, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e02e      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x98>
 80020e6:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a77      	ldr	r2, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0xbc>
 800210a:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a71      	ldr	r2, [pc, #452]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xd4>
 8002124:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6a      	ldr	r2, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fa3a 	bl	80015bc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fa36 	bl	80015bc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e200      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xe4>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fa26 	bl	80015bc <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fa22 	bl	80015bc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1ec      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x10c>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a2:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
 80021ba:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1c0      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4939      	ldr	r1, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x270>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff f9db 	bl	80015bc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff f9d7 	bl	80015bc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1a1      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4927      	ldr	r1, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x270>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff f9ba 	bl	80015bc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff f9b6 	bl	80015bc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e180      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03a      	beq.n	80022ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff f99a 	bl	80015bc <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff f996 	bl	80015bc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e160      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f000 face 	bl	800284c <RCC_Delay>
 80022b0:	e01c      	b.n	80022ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7ff f980 	bl	80015bc <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022be:	e00f      	b.n	80022e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7ff f97c 	bl	80015bc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d908      	bls.n	80022e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e146      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	42420000 	.word	0x42420000
 80022dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e9      	bne.n	80022c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a6 	beq.w	8002446 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fe:	4b8b      	ldr	r3, [pc, #556]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a87      	ldr	r2, [pc, #540]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b85      	ldr	r3, [pc, #532]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b82      	ldr	r3, [pc, #520]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7e      	ldr	r2, [pc, #504]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7ff f93d 	bl	80015bc <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7ff f939 	bl	80015bc <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b64      	cmp	r3, #100	; 0x64
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e103      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	4b75      	ldr	r3, [pc, #468]	; (8002530 <HAL_RCC_OscConfig+0x4c8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x312>
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	e02d      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x334>
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	e01c      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x356>
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a60      	ldr	r2, [pc, #384]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4a5d      	ldr	r2, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	e00b      	b.n	80023d6 <HAL_RCC_OscConfig+0x36e>
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a5a      	ldr	r2, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f8ed 	bl	80015bc <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff f8e9 	bl	80015bc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0b1      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ee      	beq.n	80023e6 <HAL_RCC_OscConfig+0x37e>
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff f8d7 	bl	80015bc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff f8d3 	bl	80015bc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e09b      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d061      	beq.n	8002520 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d146      	bne.n	80024f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff f8a7 	bl	80015bc <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff f8a3 	bl	80015bc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e06d      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d108      	bne.n	80024ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4921      	ldr	r1, [pc, #132]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a19      	ldr	r1, [r3, #32]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	430b      	orrs	r3, r1
 80024be:	491b      	ldr	r1, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x4cc>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff f877 	bl	80015bc <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7ff f873 	bl	80015bc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e03d      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x46a>
 80024f0:	e035      	b.n	800255e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff f860 	bl	80015bc <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7ff f85c 	bl	80015bc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e026      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_OscConfig+0x4c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x498>
 800251e:	e01e      	b.n	800255e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e019      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_OscConfig+0x500>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	429a      	cmp	r2, r3
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0d0      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4965      	ldr	r1, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d040      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e073      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06b      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4936      	ldr	r1, [pc, #216]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7fe ffae 	bl	80015bc <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe ffaa 	bl	80015bc <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e053      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d210      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4922      	ldr	r1, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1cc>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1d0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe ff0c 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	08004798 	.word	0x08004798
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x30>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x36>
 800276e:	e027      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002772:	613b      	str	r3, [r7, #16]
      break;
 8002774:	e027      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a17      	ldr	r2, [pc, #92]	; (80027dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0c5b      	lsrs	r3, r3, #17
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027a2:	fb03 f202 	mul.w	r2, r3, r2
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e004      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	613b      	str	r3, [r7, #16]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	613b      	str	r3, [r7, #16]
      break;
 80027c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c6:	693b      	ldr	r3, [r7, #16]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	080047b0 	.word	0x080047b0
 80027e0:	080047c0 	.word	0x080047c0
 80027e4:	003d0900 	.word	0x003d0900

080027e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff2 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	080047a8 	.word	0x080047a8

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffde 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0adb      	lsrs	r3, r3, #11
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	080047a8 	.word	0x080047a8

0800284c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <RCC_Delay+0x34>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <RCC_Delay+0x38>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0a5b      	lsrs	r3, r3, #9
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002868:	bf00      	nop
  }
  while (Delay --);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	60fa      	str	r2, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f9      	bne.n	8002868 <RCC_Delay+0x1c>
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	20000000 	.word	0x20000000
 8002884:	10624dd3 	.word	0x10624dd3

08002888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e041      	b.n	800291e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fcaa 	bl	8001208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f000 fc30 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e03a      	b.n	80029b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_TIM_Base_Start_IT+0x98>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x58>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296a:	d009      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x58>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x58>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d010      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	e007      	b.n	80029b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800

080029cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e041      	b.n	8002a62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f839 	bl	8002a6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 fb8e 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_TIM_PWM_Start+0x24>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e022      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x6a>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d109      	bne.n	8002aba <HAL_TIM_PWM_Start+0x3e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e015      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x6a>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d109      	bne.n	8002ad4 <HAL_TIM_PWM_Start+0x58>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e008      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x6a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e05e      	b.n	8002bac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Start+0x82>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	e013      	b.n	8002b26 <HAL_TIM_PWM_Start+0xaa>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start+0x92>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0c:	e00b      	b.n	8002b26 <HAL_TIM_PWM_Start+0xaa>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Start+0xa2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1c:	e003      	b.n	8002b26 <HAL_TIM_PWM_Start+0xaa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fd7c 	bl	800362c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <HAL_TIM_PWM_Start+0x138>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d107      	bne.n	8002b4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_TIM_PWM_Start+0x138>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00e      	beq.n	8002b76 <HAL_TIM_PWM_Start+0xfa>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b60:	d009      	beq.n	8002b76 <HAL_TIM_PWM_Start+0xfa>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <HAL_TIM_PWM_Start+0x13c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_TIM_PWM_Start+0xfa>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_TIM_PWM_Start+0x140>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d111      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d010      	beq.n	8002baa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b98:	e007      	b.n	8002baa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800

08002bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d122      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d11b      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0202 	mvn.w	r2, #2
 8002bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa76 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002c08:	e005      	b.n	8002c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa69 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fa78 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0204 	mvn.w	r2, #4
 8002c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa4c 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa3f 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fa4e 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0208 	mvn.w	r2, #8
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa22 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa15 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa24 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0210 	mvn.w	r2, #16
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2208      	movs	r2, #8
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9f8 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9eb 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f9fa 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0201 	mvn.w	r2, #1
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd ff6e 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fce9 	bl	8003742 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f9be 	bl	8003118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0220 	mvn.w	r2, #32
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fcb4 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e0ae      	b.n	8002f4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	f200 809f 	bhi.w	8002f3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002f3d 	.word	0x08002f3d
 8002e0c:	08002f3d 	.word	0x08002f3d
 8002e10:	08002f3d 	.word	0x08002f3d
 8002e14:	08002e79 	.word	0x08002e79
 8002e18:	08002f3d 	.word	0x08002f3d
 8002e1c:	08002f3d 	.word	0x08002f3d
 8002e20:	08002f3d 	.word	0x08002f3d
 8002e24:	08002ebb 	.word	0x08002ebb
 8002e28:	08002f3d 	.word	0x08002f3d
 8002e2c:	08002f3d 	.word	0x08002f3d
 8002e30:	08002f3d 	.word	0x08002f3d
 8002e34:	08002efb 	.word	0x08002efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f9d6 	bl	80031f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0208 	orr.w	r2, r2, #8
 8002e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6999      	ldr	r1, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	619a      	str	r2, [r3, #24]
      break;
 8002e76:	e064      	b.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fa1c 	bl	80032bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6999      	ldr	r1, [r3, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	021a      	lsls	r2, r3, #8
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	619a      	str	r2, [r3, #24]
      break;
 8002eb8:	e043      	b.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fa65 	bl	8003390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0208 	orr.w	r2, r2, #8
 8002ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0204 	bic.w	r2, r2, #4
 8002ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69d9      	ldr	r1, [r3, #28]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	61da      	str	r2, [r3, #28]
      break;
 8002ef8:	e023      	b.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 faaf 	bl	8003464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69d9      	ldr	r1, [r3, #28]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	021a      	lsls	r2, r3, #8
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	61da      	str	r2, [r3, #28]
      break;
 8002f3a:	e002      	b.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIM_ConfigClockSource+0x1c>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0b4      	b.n	80030da <HAL_TIM_ConfigClockSource+0x186>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d03e      	beq.n	8003028 <HAL_TIM_ConfigClockSource+0xd4>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	f200 8087 	bhi.w	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb6:	f000 8086 	beq.w	80030c6 <HAL_TIM_ConfigClockSource+0x172>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d87f      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc0:	2b70      	cmp	r3, #112	; 0x70
 8002fc2:	d01a      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0xa6>
 8002fc4:	2b70      	cmp	r3, #112	; 0x70
 8002fc6:	d87b      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc8:	2b60      	cmp	r3, #96	; 0x60
 8002fca:	d050      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x11a>
 8002fcc:	2b60      	cmp	r3, #96	; 0x60
 8002fce:	d877      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b50      	cmp	r3, #80	; 0x50
 8002fd2:	d03c      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xfa>
 8002fd4:	2b50      	cmp	r3, #80	; 0x50
 8002fd6:	d873      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d058      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x13a>
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d86f      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	d064      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15a>
 8002fe4:	2b30      	cmp	r3, #48	; 0x30
 8002fe6:	d86b      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d060      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15a>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d867      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05c      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d05a      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15a>
 8002ff8:	e062      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	f000 faf0 	bl	80035ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800301c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	609a      	str	r2, [r3, #8]
      break;
 8003026:	e04f      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003038:	f000 fad9 	bl	80035ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800304a:	609a      	str	r2, [r3, #8]
      break;
 800304c:	e03c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800305a:	461a      	mov	r2, r3
 800305c:	f000 fa50 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2150      	movs	r1, #80	; 0x50
 8003066:	4618      	mov	r0, r3
 8003068:	f000 faa7 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 800306c:	e02c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800307a:	461a      	mov	r2, r3
 800307c:	f000 fa6e 	bl	800355c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2160      	movs	r1, #96	; 0x60
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fa97 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 800308c:	e01c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	461a      	mov	r2, r3
 800309c:	f000 fa30 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2140      	movs	r1, #64	; 0x40
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa87 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 80030ac:	e00c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f000 fa7e 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 80030be:	e003      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e000      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800

080031f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 0201 	bic.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0302 	bic.w	r3, r3, #2
 8003238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <TIM_OC1_SetConfig+0xc8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10c      	bne.n	8003266 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0308 	bic.w	r3, r3, #8
 8003252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <TIM_OC1_SetConfig+0xc8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d111      	bne.n	8003292 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40012c00 	.word	0x40012c00

080032bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f023 0210 	bic.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0320 	bic.w	r3, r3, #32
 8003306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a1d      	ldr	r2, [pc, #116]	; (800338c <TIM_OC2_SetConfig+0xd0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10d      	bne.n	8003338 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <TIM_OC2_SetConfig+0xd0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d113      	bne.n	8003368 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00

08003390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <TIM_OC3_SetConfig+0xd0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10d      	bne.n	800340a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <TIM_OC3_SetConfig+0xd0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d113      	bne.n	800343a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00

08003464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	031b      	lsls	r3, r3, #12
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <TIM_OC4_SetConfig+0x98>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d109      	bne.n	80034d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00

08003500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 030a 	bic.w	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0210 	bic.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	031b      	lsls	r3, r3, #12
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003598:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f043 0307 	orr.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003608:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	431a      	orrs	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4313      	orrs	r3, r2
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	609a      	str	r2, [r3, #8]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2201      	movs	r2, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e046      	b.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a16      	ldr	r2, [pc, #88]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d009      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10c      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e042      	b.n	80037ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fd98 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 ff37 	bl	800460c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	; 0x30
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d156      	bne.n	80038bc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_Transmit_DMA+0x26>
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e04f      	b.n	80038be <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2221      	movs	r2, #33	; 0x21
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_UART_Transmit_DMA+0xd4>)
 8003844:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	4a20      	ldr	r2, [pc, #128]	; (80038cc <HAL_UART_Transmit_DMA+0xd8>)
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <HAL_UART_Transmit_DMA+0xdc>)
 8003854:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	2200      	movs	r2, #0
 800385c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3304      	adds	r3, #4
 8003872:	461a      	mov	r2, r3
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	f7fe f813 	bl	80018a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003882:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3314      	adds	r3, #20
 800388a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	617b      	str	r3, [r7, #20]
   return(result);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3314      	adds	r3, #20
 80038a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a4:	627a      	str	r2, [r7, #36]	; 0x24
 80038a6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	6a39      	ldr	r1, [r7, #32]
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3730      	adds	r7, #48	; 0x30
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	08003ea3 	.word	0x08003ea3
 80038cc:	08003f3d 	.word	0x08003f3d
 80038d0:	080040c1 	.word	0x080040c1

080038d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d112      	bne.n	8003914 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_UART_Receive_DMA+0x26>
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e00b      	b.n	8003916 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	461a      	mov	r2, r3
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fc22 	bl	8004154 <UART_Start_Receive_DMA>
 8003910:	4603      	mov	r3, r0
 8003912:	e000      	b.n	8003916 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b0ba      	sub	sp, #232	; 0xe8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800395e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_UART_IRQHandler+0x66>
 8003972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fd86 	bl	8004490 <UART_Receive_IT>
      return;
 8003984:	e25b      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80de 	beq.w	8003b4c <HAL_UART_IRQHandler+0x22c>
 8003990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800399c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80d1 	beq.w	8003b4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_UART_IRQHandler+0xae>
 80039b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_UART_IRQHandler+0xd2>
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_UART_IRQHandler+0xf6>
 80039fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_UART_IRQHandler+0x126>
 8003a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0208 	orr.w	r2, r3, #8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 81f2 	beq.w	8003e34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_UART_IRQHandler+0x14e>
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fd11 	bl	8004490 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_UART_IRQHandler+0x17a>
 8003a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04f      	beq.n	8003b3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fc1b 	bl	80042d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d041      	beq.n	8003b32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3314      	adds	r3, #20
 8003ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ada:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1d9      	bne.n	8003aae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	4a7e      	ldr	r2, [pc, #504]	; (8003d00 <HAL_UART_IRQHandler+0x3e0>)
 8003b08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd ff62 	bl	80019d8 <HAL_DMA_Abort_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b24:	4610      	mov	r0, r2
 8003b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e00e      	b.n	8003b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f9a5 	bl	8003e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00a      	b.n	8003b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9a1 	bl	8003e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e006      	b.n	8003b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f99d 	bl	8003e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b46:	e175      	b.n	8003e34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	bf00      	nop
    return;
 8003b4a:	e173      	b.n	8003e34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 814f 	bne.w	8003df4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8148 	beq.w	8003df4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8141 	beq.w	8003df4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80b6 	beq.w	8003d04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8145 	beq.w	8003e38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	f080 813e 	bcs.w	8003e38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	f000 8088 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bfc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1d9      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e1      	bne.n	8003c1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e3      	bne.n	8003c58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb0:	f023 0310 	bic.w	r3, r3, #16
 8003cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cc4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e3      	bne.n	8003c9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fe40 	bl	8001960 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8c8 	bl	8003e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cfc:	e09c      	b.n	8003e38 <HAL_UART_IRQHandler+0x518>
 8003cfe:	bf00      	nop
 8003d00:	0800439b 	.word	0x0800439b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 808e 	beq.w	8003e3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8089 	beq.w	8003e3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	623b      	str	r3, [r7, #32]
   return(result);
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d86:	633a      	str	r2, [r7, #48]	; 0x30
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e3      	bne.n	8003d62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003dcc:	61fa      	str	r2, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e3      	bne.n	8003da8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f84d 	bl	8003e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df2:	e023      	b.n	8003e3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_UART_IRQHandler+0x4f4>
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fad8 	bl	80043c2 <UART_Transmit_IT>
    return;
 8003e12:	e014      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <HAL_UART_IRQHandler+0x51e>
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb17 	bl	8004460 <UART_EndTransmit_IT>
    return;
 8003e32:	e004      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e34:	bf00      	nop
 8003e36:	e002      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e38:	bf00      	nop
 8003e3a:	e000      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e3c:	bf00      	nop
  }
}
 8003e3e:	37e8      	adds	r7, #232	; 0xe8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b090      	sub	sp, #64	; 0x40
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d137      	bne.n	8003f2e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee4:	633a      	str	r2, [r7, #48]	; 0x30
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f18:	61fa      	str	r2, [r7, #28]
 8003f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	617b      	str	r3, [r7, #20]
   return(result);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f2c:	e002      	b.n	8003f34 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003f2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f30:	f7ff ff88 	bl	8003e44 <HAL_UART_TxCpltCallback>
}
 8003f34:	bf00      	nop
 8003f36:	3740      	adds	r7, #64	; 0x40
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff ff83 	bl	8003e56 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b09c      	sub	sp, #112	; 0x70
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d172      	bne.n	800405a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	2200      	movs	r2, #0
 8003f78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e5      	bne.n	8003f7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fce:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004002:	633a      	str	r2, [r7, #48]	; 0x30
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	2b01      	cmp	r3, #1
 8004024:	d119      	bne.n	800405a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	60fb      	str	r3, [r7, #12]
   return(result);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f023 0310 	bic.w	r3, r3, #16
 800403c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004046:	61fa      	str	r2, [r7, #28]
 8004048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	69b9      	ldr	r1, [r7, #24]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	617b      	str	r3, [r7, #20]
   return(result);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	2200      	movs	r2, #0
 800405e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800406c:	4619      	mov	r1, r3
 800406e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004070:	f7ff ff0c 	bl	8003e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004074:	e002      	b.n	800407c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004076:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004078:	f7fc fdfa 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 800407c:	bf00      	nop
 800407e:	3770      	adds	r7, #112	; 0x70
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	2b01      	cmp	r3, #1
 800409e:	d108      	bne.n	80040b2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4619      	mov	r1, r3
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7ff feee 	bl	8003e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040b0:	e002      	b.n	80040b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff fed8 	bl	8003e68 <HAL_UART_RxHalfCpltCallback>
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b21      	cmp	r3, #33	; 0x21
 80040f2:	d108      	bne.n	8004106 <UART_DMAError+0x46>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f000 f8c1 	bl	8004288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b22      	cmp	r3, #34	; 0x22
 8004126:	d108      	bne.n	800413a <UART_DMAError+0x7a>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004134:	68b8      	ldr	r0, [r7, #8]
 8004136:	f000 f8ce 	bl	80042d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f043 0210 	orr.w	r2, r3, #16
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004146:	68b8      	ldr	r0, [r7, #8]
 8004148:	f7ff fe97 	bl	8003e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b098      	sub	sp, #96	; 0x60
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2222      	movs	r2, #34	; 0x22
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	4a3e      	ldr	r2, [pc, #248]	; (800427c <UART_Start_Receive_DMA+0x128>)
 8004182:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <UART_Start_Receive_DMA+0x12c>)
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <UART_Start_Receive_DMA+0x130>)
 8004192:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	2200      	movs	r2, #0
 800419a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	f7fd fb74 	bl	80018a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d019      	beq.n	800420a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80041fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	657b      	str	r3, [r7, #84]	; 0x54
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800422a:	63ba      	str	r2, [r7, #56]	; 0x38
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004254:	653b      	str	r3, [r7, #80]	; 0x50
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3314      	adds	r3, #20
 800425c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800425e:	627a      	str	r2, [r7, #36]	; 0x24
 8004260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6a39      	ldr	r1, [r7, #32]
 8004264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	61fb      	str	r3, [r7, #28]
   return(result);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3760      	adds	r7, #96	; 0x60
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	08003f59 	.word	0x08003f59
 8004280:	08004085 	.word	0x08004085
 8004284:	080040c1 	.word	0x080040c1

08004288 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	61ba      	str	r2, [r7, #24]
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6979      	ldr	r1, [r7, #20]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	613b      	str	r3, [r7, #16]
   return(result);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80042cc:	bf00      	nop
 80042ce:	3724      	adds	r7, #36	; 0x24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b095      	sub	sp, #84	; 0x54
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042fe:	643a      	str	r2, [r7, #64]	; 0x40
 8004300:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e5      	bne.n	80042de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	61fb      	str	r3, [r7, #28]
   return(result);
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e5      	bne.n	8004312 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	2b01      	cmp	r3, #1
 800434c:	d119      	bne.n	8004382 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	60bb      	str	r3, [r7, #8]
   return(result);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	647b      	str	r3, [r7, #68]	; 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800436e:	61ba      	str	r2, [r7, #24]
 8004370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004390:	bf00      	nop
 8004392:	3754      	adds	r7, #84	; 0x54
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff fd60 	bl	8003e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b21      	cmp	r3, #33	; 0x21
 80043d4:	d13e      	bne.n	8004454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043de:	d114      	bne.n	800440a <UART_Transmit_IT+0x48>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d110      	bne.n	800440a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	621a      	str	r2, [r3, #32]
 8004408:	e008      	b.n	800441c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	1c59      	adds	r1, r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6211      	str	r1, [r2, #32]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4619      	mov	r1, r3
 800442a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10f      	bne.n	8004450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800443e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800444e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004476:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fcdf 	bl	8003e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b22      	cmp	r3, #34	; 0x22
 80044a2:	f040 80ae 	bne.w	8004602 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d117      	bne.n	80044e0 <UART_Receive_IT+0x50>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d113      	bne.n	80044e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	629a      	str	r2, [r3, #40]	; 0x28
 80044de:	e026      	b.n	800452e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d007      	beq.n	8004504 <UART_Receive_IT+0x74>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <UART_Receive_IT+0x82>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e008      	b.n	8004524 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451e:	b2da      	uxtb	r2, r3
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4619      	mov	r1, r3
 800453c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800453e:	2b00      	cmp	r3, #0
 8004540:	d15d      	bne.n	80045fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0220 	bic.w	r2, r2, #32
 8004550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004560:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	2b01      	cmp	r3, #1
 8004586:	d135      	bne.n	80045f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f023 0310 	bic.w	r3, r3, #16
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	623a      	str	r2, [r7, #32]
 80045b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	69f9      	ldr	r1, [r7, #28]
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e5      	bne.n	800458e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d10a      	bne.n	80045e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fc4d 	bl	8003e8c <HAL_UARTEx_RxEventCallback>
 80045f2:	e002      	b.n	80045fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fc fb3b 	bl	8000c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e002      	b.n	8004604 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3730      	adds	r7, #48	; 0x30
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004646:	f023 030c 	bic.w	r3, r3, #12
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	430b      	orrs	r3, r1
 8004652:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <UART_SetConfig+0x114>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d103      	bne.n	800467c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7fe f8d6 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	e002      	b.n	8004682 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fe f8be 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8004680:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009a      	lsls	r2, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	4a22      	ldr	r2, [pc, #136]	; (8004724 <UART_SetConfig+0x118>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	0119      	lsls	r1, r3, #4
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009a      	lsls	r2, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b8:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <UART_SetConfig+0x118>)
 80046ba:	fba3 0302 	umull	r0, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2064      	movs	r0, #100	; 0x64
 80046c2:	fb00 f303 	mul.w	r3, r0, r3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	3332      	adds	r3, #50	; 0x32
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <UART_SetConfig+0x118>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d8:	4419      	add	r1, r3
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009a      	lsls	r2, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <UART_SetConfig+0x118>)
 80046f2:	fba3 0302 	umull	r0, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2064      	movs	r0, #100	; 0x64
 80046fa:	fb00 f303 	mul.w	r3, r0, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a07      	ldr	r2, [pc, #28]	; (8004724 <UART_SetConfig+0x118>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 020f 	and.w	r2, r3, #15
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	440a      	add	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40013800 	.word	0x40013800
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <memset>:
 8004728:	4603      	mov	r3, r0
 800472a:	4402      	add	r2, r0
 800472c:	4293      	cmp	r3, r2
 800472e:	d100      	bne.n	8004732 <memset+0xa>
 8004730:	4770      	bx	lr
 8004732:	f803 1b01 	strb.w	r1, [r3], #1
 8004736:	e7f9      	b.n	800472c <memset+0x4>

08004738 <__libc_init_array>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	2600      	movs	r6, #0
 800473c:	4d0c      	ldr	r5, [pc, #48]	; (8004770 <__libc_init_array+0x38>)
 800473e:	4c0d      	ldr	r4, [pc, #52]	; (8004774 <__libc_init_array+0x3c>)
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	42a6      	cmp	r6, r4
 8004746:	d109      	bne.n	800475c <__libc_init_array+0x24>
 8004748:	f000 f81a 	bl	8004780 <_init>
 800474c:	2600      	movs	r6, #0
 800474e:	4d0a      	ldr	r5, [pc, #40]	; (8004778 <__libc_init_array+0x40>)
 8004750:	4c0a      	ldr	r4, [pc, #40]	; (800477c <__libc_init_array+0x44>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	42a6      	cmp	r6, r4
 8004758:	d105      	bne.n	8004766 <__libc_init_array+0x2e>
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004760:	4798      	blx	r3
 8004762:	3601      	adds	r6, #1
 8004764:	e7ee      	b.n	8004744 <__libc_init_array+0xc>
 8004766:	f855 3b04 	ldr.w	r3, [r5], #4
 800476a:	4798      	blx	r3
 800476c:	3601      	adds	r6, #1
 800476e:	e7f2      	b.n	8004756 <__libc_init_array+0x1e>
 8004770:	080047c4 	.word	0x080047c4
 8004774:	080047c4 	.word	0x080047c4
 8004778:	080047c4 	.word	0x080047c4
 800477c:	080047c8 	.word	0x080047c8

08004780 <_init>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr

0800478c <_fini>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr
